#include "motor.h"

void initializePWMTimer()
{
	GPIO_InitTypeDef pwmgpio;
	pwmgpio.GPIO_Mode = GPIO_Mode_AF_PP;
	pwmgpio.GPIO_Speed = GPIO_Speed_50MHz;
	pwmgpio.GPIO_Pin = MOTOR1_PWM1_PIN;
	GPIO_Init(MOTOR1_PWM1_GPIO, &pwmgpio);

	pwmgpio.GPIO_Pin = MOTOR1_PWM2_PIN;
	GPIO_Init(MOTOR1_PWM2_GPIO, &pwmgpio);

	GPIO_PinRemapConfig(GPIO_FullRemap_TIM3, ENABLE);

	TIM_TimeBaseInitTypeDef TIM_InitStruct;
	TIM_InitStruct.TIM_ClockDivision = TIM_CKD_DIV4; // dzielnik 1
	TIM_InitStruct.TIM_CounterMode = TIM_CounterMode_Up; // licznik w góre
	TIM_InitStruct.TIM_Period = 10*3; // okres licznika 10 us, 2stopnie serwo
	TIM_InitStruct.TIM_Prescaler = 32; // preskaler 56  = 46Hz
	TIM_TimeBaseInit(TIM3, &TIM_InitStruct); // inicjalizuje TIM2

	TIM_ClearFlag( TIM3, TIM_FLAG_Update ); // czysci flage aktualizacji TIM2
	TIM_Cmd(TIM3, ENABLE); // wlacza timer TIM2
}

void initializeDirectionOutput()
{
	GPIO_PinRemapConfig(GPIO_Remap_SWJ_NoJTRST,ENABLE); // Disable NJTRST, PB4 is Alternate Function
	GPIO_InitTypeDef dir;
	dir.GPIO_Mode = GPIO_Mode_Out_PP;
	dir.GPIO_Speed = GPIO_Speed_2MHz;
	dir.GPIO_Pin = MOTOR1_DIR2_PIN;
	GPIO_Init(MOTOR1_DIR2_GPIO, &dir);

	dir.GPIO_Pin = MOTOR1_DIR1_PIN;
	GPIO_Init(MOTOR1_DIR1_GPIO, &dir);

	dir.GPIO_Pin = GPIO_Pin_1;
	GPIO_Init(GPIOC, &dir);

	MOTOR1_DIR2_GPIO->ODR &= ~(MOTOR1_DIR2_PIN);
	MOTOR1_DIR1_GPIO->ODR &= ~(MOTOR1_DIR1_PIN);
}

void safeStop()
{
	TIM2->CCR1 = 0; // stop motor
	TIM3->CCR2 = 127+255;
}
